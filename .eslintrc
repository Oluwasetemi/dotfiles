{
	"plugins": ["prettier", "react", "react-hooks", "jest", "import"],
	"extends": [
		"eslint:recommended",
		"airbnb",
		"prettier",
		"prettier/react"
		// "plugin:@typescript-eslint/recommended"
		// "plugin:mdx/recommended"
	],
	"parser": "babel-eslint",
	"parserOptions": {
		"ecmaVersion": 2020,
		// "requireConfigFile": false,
		"ecmaFeatures": {
			"impliedStrict": true,
			"classes": true
		}
	},
	"env": {
		"browser": true,
		"node": true,
		"jquery": true,
		"jest": true,
		"es6": true
	},
	"rules": {
		// "no-tabs": "error",
		"curly": ["error", "multi-line"],
		"jsx-quotes": "error",
		"jsx-a11y/accessible-emoji": 0,
		"jsx-a11y/href-no-hash": "off",
		"jsx-a11y/anchor-is-valid": [
			"warn",
			{
				"aspects": ["invalidHref"]
			}
		],
		"no-trailing-spaces": "error",
		"no-undef": "error",
		"react-hooks/rules-of-hooks": "error",
		"no-extra-semi": "error",
		"no-debugger": 0,
		"no-alert": 0,
		"no-unused-vars": [
			1,
			{
				"argsIgnorePattern": "res|next|^err"
			}
		],
		"prefer-const": [
			"error",
			{
				"destructuring": "all"
			}
		],
		"arrow-body-style": [2, "as-needed"],
		"no-unused-expressions": [
			2,
			{
				"allowTaggedTemplates": true
			}
		],
		"no-param-reassign": [
			2,
			{
				"props": false
			}
		],
		"no-console": 0,
		"import/prefer-default-export": 0,
		"import": 0,
		"func-names": 0,
		"space-before-function-paren": 0,
		"max-len": 0,
		"import/extensions": 0,
		"no-underscore-dangle": 0,
		"consistent-return": 0,
		"react/display-name": 1,
		"react/no-array-index-key": 0,
		"react/prefer-stateless-function": 0,
		"react/forbid-prop-types": 0,
		"react/no-unescaped-entities": 0,
		"react/require-default-props": 0,
		"react/jsx-filename-extension": [
			1,
			{
				"extensions": [".js", ".jsx", ".tsx", ".ts"]
			}
		],
		"radix": 0,
		"no-shadow": [
			2,
			{
				"hoist": "all",
				"allow": ["resolve", "reject", "done", "next", "err", "error"]
			}
		],
		"comma-dangle": [
			"error",
			{
				"arrays": "always-multiline",
				"objects": "always-multiline",
				"imports": "only-multiline",
				"exports": "only-multiline",
				"functions": "only-multiline"
			}
		],
		"quotes": [
			2,
			"single",
			{
				"avoidEscape": true,
				"allowTemplateLiterals": true
			}
		],
		"import/no-unresolved": "error",
		"import/order": "error",
		"jest/valid-describe": "off",
		"jest/valid-expect": "off",
		"jest/no-conditional-expect": "off",
		"jest/no-standalone-expect": "off",
		"jest/expect-expect": "off",
		"jest/no-export": "off",
		"jest/valid-title": "off",
		"jest/no-try-expect": "off",
		"jest/no-disabled-tests": "error",
		"object-curly-spacing": ["error", "always"],
		"react/jsx-boolean-value": "warn",
		"react/jsx-no-undef": "error",
		"react/jsx-uses-react": "error",
		"react/jsx-uses-vars": "error",
		"react/jsx-wrap-multilines": "warn",
		"react/no-did-mount-set-state": "warn",
		"react/no-did-update-set-state": "warn",
		"react/no-unknown-property": "warn",
		"react/react-in-jsx-scope": "error",
		"react/self-closing-comp": "warn",
		"react/sort-prop-types": "warn",
		"semi": "error",
		"strict": "off",
		"no-restricted-syntax": [
			"error",
			{
				// Curious why we have this rule?
				// - Enums only work for a subset of use cases that unions of string literals + objects work for and learning one language feature is easier than learning two language features
				// - Enums are a new language feature which have runtime semantics which means they change TypeScript from JS + types to JS + types + extra language features which is harder to teach without clear advantages for this specific feature
				"selector": "TSEnumDeclaration",
				"message": "Use a union of string literals instead of an enum"
			}
		],
		"prettier/prettier": [
			"error",
			{
				"trailingComma": "all",
				"singleQuote": true,
				"printWidth": 80,
				"semi": true,
				"tabWidth": 2,
				"useTabs": false,
				"arrowParens": "always"
			}
		]
	}
}
