{
  /*
		Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and
		description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
		$1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
		same ids are connected.
		Example:
		"Print to console": {
			"prefix": "log",
			"body": [
				"console.log('$1');",
				"$2"
			],
			"description": "Log output to console"
		}
		"Function description": {
			"prefix":"shortcode for snippet",
			"body": [
				"lines $(1)",
				"lines ${1:variableName}"
			]
		}
	*/
  "ajax es6": {
    "prefix": "ajax",
    "body": [
      "$.ajax({",
      "\ttype:'$1',",
      "\turl: '$2',",
      "\tmethod: '$3',",
      "\tdataType:'json',",
      "\tsuccess: (data) => {",
      "\t$4",
      "\t},",
      "\terror: (err) => {",
      "\t$5",
      "\t},",
      "});"
    ],
    "description": "call ajax in es6"
  },
  "quokka run": {
    "prefix": "quokka",
    "body": ["/*?*/"]
  },
  "quokka time ": {
    "prefix": "time",
    "body": ["/*?.*/"]
  },
  "start browser-sync": {
    "prefix": "bsync",
    "body": [
      "browser-sync start --server --files \"${1:HTML files}.html, ${2:CSS file Path }.css, ${3:JS file path}.js\" --index \"$4\" $0"
    ],
    "description": "Start a browser-sync server"
  },
  "require JS": {
    "prefix": "reqjs",
    "body": "const $1 = require('$2');$0",
    "description": "Require a module in JavaScript"
  },
  "Template Literal Variable": {
    "prefix": "tl",
    "body": "${$1:}$0",
    "description": "JavaScript Land Template Literals"
  },
  "js doc simple": {
    "prefix": "jsdoc1",
    "body": "/** ${1:This is a description of the foo function} */$0",
    "description": "A simple comment in JSDoc"
  },
  "js doc advance": {
    "prefix": "jsdoc2",
    "body": [
      "/**",
      "* Represents a book.",
      "* @constructor",
      "* @param ${1:datatype} ${2:param1} - ${3:description}.",
      "* @param ${4:datatype} ${5:param2} - ${6:description}.",
      "*/"
    ],
    "description": "A simple comment in JSDoc"
  },
  "Print eslint disable to console": {
    "prefix": "esl",
    "body": ["/* eslint-disable */"],
    "description": "Disable eslint! for the whole file"
  },
  "import styled component": {
    "prefix": "ims",
    "body": ["import styled from 'styled-components'", "$0"],
    "description": "Import a Style Component Package"
  },
  "import gql template tag": {
    "prefix": "imgql",
    "body": ["import gql from 'graphql-tag'", "$0"],
    "description": "Import a gql template tag"
  },
  "import react": {
    "prefix": "imreact",
    "body": ["import React from \"react\"", "$0"],
    "description": "Import react"
  },
  "querySelector": {
    "prefix": "qs",
    "body": ["document.querySelector(\"$1\")", "$0"],
    "description": "Query an Element in an html"
  },
  "querySelectorAll": {
    "prefix": "qsA",
    "body": ["document.querySelectorAll(\"$1\")", "$0"],
    "description": "Query a collection of Element"
  },
  "async test": {
    "prefix": "atest",
    "body": ["test('${1:should}', async () => {", "\t$0", "});"],
    "description": "async test"
  },
  "Print to console": {
    "prefix": "lg",
    "body": ["console.log(\"$1\");", "$2"],
    "description": "Log output to console"
  },
  "JavaScript Function With Comment": {
    "prefix": "funcC",
    "body": [
      "/**",
      " * ${1:description}",
      " * @param {${2:type}} ${3:paramName} - ${4:description}",
      " * @returns {${5:returnType}} ${6:description}",
      " */",
      "function ${7:functionName}(${3:paramName}) {",
      "  ${0}",
      "}",
      ""
    ],
    "description": "Creates a JavaScript function with JSDoc comments"
  },
  "JavaScript Function": {
    "prefix": "func",
    "body": ["function ${1:functionName}(${2:paramName}) {", "  ${0}", "}", ""],
    "description": "Creates a JavaScript function with JSDoc comments"
  },

  "Arrow Function": {
    "prefix": "arrowExp",
    "body": [
      "const ${1:functionName} = (${2:params}) => {",
      "  ${0}",
      "};",
      ""
    ],
    "description": "Creates an arrow function stored in a constant explicitly return"
  },
  "Arrow Function Short": {
    "prefix": "arrow",
    "body": ["const ${1:functionName} = (${2:params}) => ${0}", ""],
    "description": "Creates an arrow function stored in a constant"
  },

  "Anonymous Function": {
    "prefix": "anon",
    "body": ["function(${1:params}) {", "  ${0}", "}"],
    "description": "Creates an anonymous function"
  },

  "Async Function": {
    "prefix": "asyncfunc",
    "body": [
      "async function ${1:functionName}(${2:paramName}) {",
      "  ${0}",
      "}",
      ""
    ],
    "description": "Creates an async JavaScript function with JSDoc comments"
  },

  "Method": {
    "prefix": "method",
    "body": ["${1:methodName}(${2:paramName}) {", "  ${0}", "}"],
    "description": "Creates a class method with JSDoc comments"
  },

  "IIFE (Immediately Invoked Function Expression)": {
    "prefix": "iife",
    "body": ["(function() {", "  ${0}", "})();"],
    "description": "Creates an immediately invoked function expression"
  },
  "New Function from String": {
    "prefix": "newfunc",
    "body": [
      "const ${1:functionName} = new Function('${2:arg1}', '${3:arg2}', 'return ${4:body}');",
      "${1}(${5});"
    ],
    "description": "Creates a new function from strings"
  },
  "New Function Constructor": {
    "prefix": "newfunction",
    "body": [
      "const ${1:fn} = new Function(",
      "  '${2:param1}',",
      "  '${3:param2}',",
      "  `",
      "    ${4:// Your code here}",
      "    return ${5:result};",
      "  `",
      ");",
      "",
      "${1}(${6:arguments});"
    ],
    "description": "Creates a function using the Function constructor"
  }
}
